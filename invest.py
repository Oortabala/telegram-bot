import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import google.generativeai as genai
import os
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not BOT_TOKEN or not GEMINI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª!")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API
bot = telebot.TeleBot(BOT_TOKEN)
genai.configure(api_key=GEMINI_API_KEY)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìà –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º", "üìä –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã")
    markup.add("‚ùì –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç", "üìâ –†—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text in ["üìà –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º", "üìä –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã", "‚ùì –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç", "üìâ –†—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"])
def button_response(message):
    if message.text == "üìâ –†—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏":
        bot.send_message(message.chat.id, get_market_data(), reply_markup=main_menu())
        return

    query = {
        "üìà –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
        "üìä –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã": "–ö–∞–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö —Å–µ–π—á–∞—Å?",
        "‚ùì –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç": "–î–∞–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º"
    }[message.text]

    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(query, generation_config={"max_output_tokens": 100})
        bot.send_message(message.chat.id, response.text, reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ AI: {str(e)}", reply_markup=main_menu())

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def get_market_data():
    try:
        # –ù–æ–≤—ã–π API –¥–ª—è –∫—É—Ä—Å–∞ USD/KZT
        forex_url = "https://api.exchangerate-api.com/v4/latest/USD"
        forex_data = requests.get(forex_url).json()
        usd_kzt = round(forex_data["rates"]["KZT"], 2)

        # API CoinGecko (Bitcoin)
        btc_price = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd").json()["bitcoin"]["usd"]

        # API OilPrice (Brent) ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π API, –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        brent_price = "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        return f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nüí∞ –î–æ–ª–ª–∞—Ä (USD/KZT): {usd_kzt}‚Ç∏\nüõ¢ –ù–µ—Ñ—Ç—å Brent: {brent_price} $\n‚Çø Bitcoin: {btc_price} $"

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
